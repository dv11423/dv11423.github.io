<style>
.accounts .tier button{width:100%}
.accounts .dlg1 table{background:#fff}
.accounts .dlg1 td{padding:0;height:1.5em}
.accounts .dlg1 input:not([type]){min-width:100%;background:none}
.accounts .dlg1 em:empty{display:none}
.accounts .dlg1 .h1{background:#efefef;line-height:2}
.accounts table th button{height:1.5rem}
.accounts table th button i{height:100%;vertical-align:top}
.accounts table td .top{display:flex}
.accounts table td .top span{flex:5em 0 0;overflow:hidden}
.accounts table .state{display:flex}
.accounts table .state i{padding:0 .3em}
.accounts table .state div{padding:0 .3em 0 0;flex:4em 1 1;min-width:4em;text-align:right}
.accounts table .state em{padding:0 .4em;font-style:normal}
.accounts table .state em:not(.order0){border-radius:.3em;color:#fff;background:#7cf}
.accounts table .state button{flex:auto}
.accounts .frmupdate:empty{display:none}
.accounts .frmupdate:not(:empty)+div{display:none}
.accounts .svg-reset{content:url('https://api.iconify.design/fluent/key-reset-20-regular.svg?color=%23555')}
</style>
<div class="accounts">
	<div class="frmupdate" ref="frmupdate"></div>
	<div class="wrap">
		<form v-on:submit.prevent="search">
			<input>
			<button type="submit">검색</button>
		</form>
		<table class="tbl1"><colgroup>
			<col>
			<col class="tier">
			<col class="id">
			<col class="pw">
			<col class="stat">
			<col class="order">
			<col class="update">
			<col class="top">
			<col class="ept">
		</colgroup><thead>
			<tr>
				<th></th>
				<th class="tier"><button @click="makeDig=1">신규</button></th>
				<th class="id">아이디</th>
				<th class="pw">패스워드 <button><i class="svg-reset"></i> 초기화</button></th>
				<th class="stat">현황 (요청 / 잔여 / 진행)</th>
				<th class="order"><button @click="order"><i class="svg-chk"></i> 할당</button></th>
				<th class="update">연장요청</th>
				<th class="top">그룹</th>
				<th class="ept"></th>
			</tr>
		</thead><tbody>
			<tr v-for="a in blankList()">
				<td></td>
				<td><i :class="'tier-'+a.tier"></i></td>
				<td>{{a.id}}</td>
				<td><input type="text" :disabled="!a.id"></td>
				<td><div class="state" v-for="b in a.ticket">
					<i :class="`${b.name}`"></i><div><em :class="`order${b.order}`">{{b.order}}</em></div><span>/</span><div>{{b.idle}}</div><span>/</span><div>{{b.run}}</div>
				</div></td>
				<td><div class="state" v-for="b in a.ticket">
					<input type="number" v-model="a.order[b.name]" :disabled="notme(a.id)">
				</div></td>
				<td><div class="state" v-for="b in a.ticket">
					<button @click="showUpdate(a.id,b.update)">{{b.update}}</button>
				</div></td>
				<td>
					<div class="top">
						<span v-for="b in a.top"><i :class="`tier-${b.tier}`"></i><br>{{b.id}}</span>
					</div>
				</td>
				<td></td>
			</tr>
		</tbody></table>
		<div class="pagelst1">
			<button @click="pagemv(-10)" :disabled="page<=1"><i class="svg-l"></i></button>
			<template v-for="{text,active} in pagelist()">
				<input type="number" min="1" :max="total" v-if="text==page" v-model="page" @keydown.enter="reload()">
				<button name="idx" v-else :value="text" :disabled="!active" @click="pagenav(text)">{{text}}</button>
			</template>
			<button @click="pagemv(10)" :disabled="page>=total"><i class="svg-r"></i></button>
		</div>
	</div>
	<dialog class="dlg1" open v-if="makeDig">
		<table class="tbl1">
			<col>
			<col class="id">
			<col class="pw">
			<thead><tr>
				<th colspan="3"><input placeholder="상위계정(아이디)" v-model="newtop"></th>
			</tr><tr>
				<th colspan="3">
					<label v-for="tier in newtiers"><input type="radio" :value="tier" v-model="newtier"><i :class="'tier-'+tier"></i></label>
				</th>
			</tr><tr>
				<th class="h1"></th>
				<th class="h1">아이디</th>
				<th class="h1">패스워드</th>
			</tr></thead><tbody><tr v-for="a in newacc">
				<td>
					<em class="error" v-if="a[0]=='err'">오류</em>
					<em class="success" v-if="a[0]=='ok'">완료</em>
				</td>
				<td><input v-model="a[1]"></td>
				<td><input v-model="a[2]"></td>
			</tr></tbody>
		</table>
		<div></div>
		<form method="dialog" v-on:submit.prevent="make">
			<button type="button" @click="newacc=Array.from({length:10},a=>['','',''])">초기화</button>
			<button type="button" @click="makeDig=0;reload()">닫기</button>
			<button>등록</button>
		</form>
	</dialog>
	<dialog class="dlg1" open v-if="message[0]=='WAIT'">
		<div>
			<p>적용중 ..</p>
		</div>
		<form method="dialog" v-on:submit.prevent="reload">
			<button>확인</button>
		</form>
	</dialog>
	<dialog class="dlg1" open v-if="message[0]=='ORDER'">
		<div>
			<p v-for="a in message.slice(1)">
				<span v-if="a.cnt>0">{{a.id}} 계정으로 <i :class="a.name"></i> {{a.cnt}}개 할당</span>
				<span v-if="a.cnt<0">{{a.id}} 계정에서 <i :class="a.name"></i> {{-a.cnt}}개 회수</span>
				<span>
					<em class="success" v-if="a.yn==1">성공</em>
					<span><em class="error" v-if="a.yn==0">실패</em></span>
				</span>
			</p>
		</div>
		<form method="dialog" v-on:submit.prevent="reload">
			<button>확인</button>
		</form>
	</dialog>
</div>
<script type="module">
import {local,signal,ref} from '/env.mjs'

const app=local.app
const total=ref(1)
const page=ref(1)
const pageidx=ref(1)
const makeDig=ref(0)
const newtop=ref("")
const newtiers=ref([])
const newtier=ref("")
const newacc=ref(Array.from({length:10},a=>["","",""]))
const list=ref([])
const listsize=ref(20)
const message=ref([])
const frmupdate=ref(null)

signal.get("accounts")({
	setup(){
		return {total,page,makeDig,newtop,newtiers,newtier,newacc,list,listsize,message,frmupdate}
	},
	methods:{
		async make(){
			var list=newacc.value.map(a=>[a[1],a[2]])
			var code=newtop.value
			var tier=newtier.value
			var {code,result}=await app.xpost("/signon2",{code,tier,list})

			if(code==200){
				for(var i=0;i<result.length;i++){
					newacc.value[i][0]=result[i][1]
				}
			}else{
				newacc.value.map(a=>a[0]="")
			}
		},
		async reload(){
			var lst=[],{page:b,rows}=await app.xpost("/accounts",{page:page.value,size:listsize.value})

			if(rows)
			for(var [line,tick] of rows){
				var data={id:null,tier:null,top:[],ticket:[],order:{}}
				var proc=(id,tier)=>{
					data.id=id
					data.tier=tier
					proc=(id,tier)=>{
						data.top.push({id,tier})
					}
				}

				for(var tmp of line.split("\n")){
					proc(...tmp.split("\t"))
				}
				for(var tmp of tick.split("\n")){
					var [name,idle,run,order,update]=tmp.split("\t")
					data.ticket.push({name,idle,run,order,update})
					data.order[name]=0
				}

				data.top.reverse()
				lst.push(data)
			}

			total.value=b
			list.value=lst
			message.value=[]
		},
		async search(e){
			this.reload()
		},
		async pagenav(i){
			page.value=i
			this.reload()
		},
		async pagemv(i){
			var idx=pageidx.value+i
			if(idx<0){
				pageidx.value=1
			}else if(idx<total.value){
				pageidx.value=idx
			}
		},
		*pagelist(){
			var last=total.value
			for(var i=pageidx.value,size=i+10;i<size;i++){
				yield {text:i,active:(i<=last)}
			}
		},
		notme(id){
			return app.userId==id
		},
		async order(){
			var data=[]

			for(var {id,order} of list.value){
				for(var name in order){
					var cnt=order[name]
					if(cnt){
						data.push([id,name,cnt])
					}
				}
			}

			if(data.length==0){
				return
			}

			message.value=["WAIT"]

			var {code,result}=await app.xpost("/tickets/move",{order:data})
			if(code==200){
				var msg=["ORDER"]
				for(var arg of result){
					msg.push({id:arg[0],name:arg[1],cnt:arg[2],yn:arg[3]})
				}
				message.value=msg
			}
		},
		async showUpdate(id,cnt){
			if(!+cnt){
				return
			}
			var frm=await app.load(frmupdate.value,"order","order","/dlg/order.htm")
			frm.id=id
			frm.reload()
		},
		*blankList(){
			var size=listsize.value
			for(var row of list.value){
				yield row
				size--
			}
			for(;size>0;size--){
				yield {}
			}
		}
	},
	async mounted(){
		var {code,list}=await app.xget("/tier/view")
		if(code==200){
			newtiers.value=list
		}
		this.reload()
	}
})
</script>