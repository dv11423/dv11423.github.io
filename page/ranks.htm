<style>
.ranks ol{margin:0;padding:0;list-style:none;box-sizing:border-box}
.ranks li{box-sizing:border-box}
.ranks .status{display:flex;padding:0;color:#fff}
.ranks .status ol,
.ranks .status li{display:flex}
.ranks .status span{padding:0 .3em}
.ranks table input[type=text]{font-size:.8em}
.ranks table th .rank-input{display:flex}
.ranks table th button{flex:auto;padding:0;height:1.5rem}
.ranks table th button i{height:100%;vertical-align:top}
.ranks table th input{width:100%;min-height:auto;vertical-align:top}
.ranks table td button{min-height:100%;width:100%}
.ranks table td input[type="number"]{min-height:100%;width:100%}
.ranks table td .run,
.ranks table td .idle,
.ranks table td .stop
.ranks table td .blank{display:flex;align-items:center;justify-content:center;height:100%;text-align:center;color:#fff}

.ranks .rside{position:fixed;top:0;right:0;bottom:0;width:20em;height:100%;background:#fff;overflow:auto}
.ranks .rside table tr{height:2em}
.ranks .rside table tbody{font-size:.8em}
.ranks .rside table .time{min-width:6em}
.ranks .rside .head{display:flex;height:2em;line-height:2em}
.ranks .rside .head span{flex:auto}
.ranks .rside .form{display:flex;height:2em}
.ranks .rside .form input[type=date]{flex:auto}
.ranks .rside .form button{width:3em}
.ranks .rside table tr{height:2em}
.ranks .rside table input[type=number]{font-size:.8rem}
</style>
<div class="ranks">
	<div class="status">
		<ol v-for="{name,run,idle} in status">
			<li>
				<span class="name"><i :class="name"></i></span>
				<span class="run">작동중 {{run}}</span>
				<span class="idle">미사용 {{idle}}</span>
			</li>
		</ol>
	</div>
	<form v-on:submit.prevent="search">
		<input>
		<button type="submit">검색</button>
		<label><input name="state" type="radio" value="" v-model="state">전체</label>
		<label><input name="state" type="radio" value="-run-" v-model="state">사용</label>
		<label><input name="state" type="radio" value="-idle-" v-model="state">미사용</label>
		<label><input name="state" type="radio" value="-fin-" v-model="state">만료</label>
	</form>
	<table class="tbl1 list"><colgroup>
		<col class="num">
		<col class="memo">
		<col class="stat">
		<col class="name">
		<col class="url">
		<col class="kwd">
		<col class="rnk">
		<col class="rnk2">
		<col class="begin">
		<col class="end">
		<col class="id">
		<col class="top">
		<col class="ept">
	</colgroup><thead>
		<tr>
			<th class="num">
				<label class="chk"><input type="checkbox" v-model="all" @click="chkall"></label>
			</th>
			<th class="stat">상태</th>
			<th class="memo">메모</th>
			<th class="name">현황</th>
			<th class="url">URL</th>
			<th class="kwd">키워드</th>
			<th class="rnk">랭크(시작 / 현재)</th>
			<th class="rnk2">
				<input type="date" v-model="date">
				<div class="rank-input">
					<button @click="ud(-1)">-</button>
					<button @click="ud(1)">+</button>
					<button @click="update"><i class="svg-chk"></i></button>
				</div>
			</th>
			<th class="begin">시작</th>
			<th class="end">종료</th>
			<th class="id">아이디</th>
			<th class="top">그룹</th>
			<th class="ept"></th>
		</tr>
	</thead><tbody>
		<tr v-for="a in blankList()">
			<td class="no">
				<label class="chk"><input type="checkbox" v-model="a.chk" :disabled="!a.id"></label>
			</td>
			<td>
				<span class="idle" v-if="a.id&&!a.timein&&!a.timeout">미사용</span>
				<span class="stop" v-if="a.id&&a.state==0">정지됨</span>
				<span class="run" v-if="a.id&&a.state==100">작동중</span>
				<span class="blank" v-if="!a.id||(a.timein&&a.timein==a.timeout)"></span>
			</td>
			<td class="txt8">{{a.note}}</td>
			<td><i :class="a.name"></i></td>
			<td class="txt8">{{a.url}}</td>
			<td class="txt8">{{a.txt}}</td>
			<td><button @click="rankOpen(a)" :disabled="!a.id">{{a.rankin}} / {{a.rankout}}</button></td>
			<td><input type="number" min="0" v-model="a.rank"></td>
			<td class="txt8">{{a.timein}}</td>
			<td class="txt8" :class="{alert:a.alert}">{{a.timeout}}</td>
			<td><i :class="'tier-'+a.tier"></i><br>{{a.id}}</td>
			<td>
				<div class="top">
					<span v-for="b in a.top"><i :class="`tier-${b.tier}`"></i><br>{{b.id}}</span>
				</div>
			</td>
			<td></td>
		</tr>
	</tbody></table>

	<div class="rside" v-if="rside">
		<div class="head">
			<span>{{txt}}</span>
			<button @click="rankClose"><i class="svg-x"></i></button>
		</div>
		<div class="form">
			<input type="date" v-model="rsideDate">
			<button @click="rankud(-1)">-</button>
			<button @click="rankud(1)">+</button>
			<button @click="rankUpdate"><i class="svg-chk"></i></button>
		</div>
		<table class="tbl1"><colgroup>
			<col class="time">
			<col class="rank">
			<col class="diff">
			<col class="last">
		</colgroup><thead>
			<tr>
				<th class="time">측정시각</th>
				<th class="rank">랭크</th>
				<th class="diff">등락</th>
				<th class="last">최종</th>
			</tr>
		</thead><tbody>
			<tr v-for="a in rsideList">
				<td>{{a.time}}</td>
				<td><input type="number" v-model="a.rank" :placeholder="a.rank2"></td>
				<td>{{a.diff}} <i class="svg-up" v-if="a.diff>0"></i><i class="svg-down" v-if="a.diff<0"></i></td>
				<td>{{a.last}} <i class="svg-up" v-if="a.last>0"></i><i class="svg-down" v-if="a.last<0"></i></td>
			</tr>
		</tbody></table>
	</div>

	<div class="pagelst1">
		<button @click="pagemv(-10)" :disabled="page<=1"><i class="svg-l"></i></button>
		<template v-for="{text,active} in pagelist()">
			<input type="number" min="1" :max="total" v-if="text==page" v-model="page" @keydown.enter="reload()">
			<button name="idx" v-else :value="text" :disabled="!active" @click="pagenav(text)">{{text}}</button>
		</template>
		<button @click="pagemv(10)" :disabled="page>=total"><i class="svg-r"></i></button>
	</div>
</div>
<script>
import {local,signal,ref} from '/env.mjs'

const app=local.app
const total=ref(1)
const page=ref(1)
const pageidx=ref(1)
const list=ref([])
const listsize=ref(20)
const state=ref("")
const status=ref([
	{name:"cs0-30-120",run:0,idle:0},
	{name:"cs0-5-40",run:0,idle:0}
])
const date=ref("")
const rside=ref(null)
const rsideRow=ref(null)
const rsideDate=ref("")
const rsideList=ref([])

signal.get("ranks")({
	setup(){
		return {total,page,state,status,listsize,
			date,
			rside,rsideDate,rsideList}
	},
	methods:{
		async reload(){
			var lst=[],{state:a,page:b,rows}=await app.xpost("/tickets",{page:page.value,size:listsize.value,state:state.value})

			for(var st of status.value){
				var tmp=a[st.name]
				if(tmp){
					st.run=tmp[0]
					st.idle=tmp[1]
				}
			}

			for(var [num,state2,name,job,txt,rank,time,note,line] of rows){
				var data={
					chk:false,rank:"",
					num,state:state2,name,job,url:this.job(job),txt,...this.parseRank(rank),...this.parseDay(time),note,
					top:[]
				}
				var proc=(id,tier)=>{
					data.id=id
					data.tier=tier
					proc=(id,tier)=>{
						data.top.push({id,tier})
					}
				}
				for(var tmp of line.split("\n")){
					proc(...tmp.split("\t"))
				}
				lst.push(data)
			}

			total.value=b
			list.value=lst
		},
		async search(e){
			this.reload()
		},
		async pagenav(i){
			page.value=i
			this.reload()
		},
		async pagemv(i){
			var idx=pageidx.value+i
			if(idx<0){
				pageidx.value=1
			}else if(idx<total.value){
				pageidx.value=idx
			}
		},
		*pagelist(){
			var last=total.value
			for(var i=pageidx.value,size=i+10;i<size;i++){
				yield {text:i,active:(i<=last)}
			}
		},
		async rankOpen(row){
			rsideRow.value=row
			rside.value=true
			this.rankReload()
		},
		ud(i){
			var now=new Date(date.value)
			now.setMonth(now.getMonth()+i)
			date.value=now.toJSON().slice(0,10)
		},
		async update(){
			var data=[],now=date.value

			for(var row of list.value){
				if(row.rank!==""){
					data.push([now,row.job,row.txt,row.rank])
				}
			}

			if(data.length){
				await app.xpost("/ranks/set",{ranks:data})
				this.reload()
			}
		},
		rankClose(){
			rside.value=false
		},
		rankud(i){
			var now=new Date(rsideDate.value)
			now.setMonth(now.getMonth()+i)
			rsideDate.value=now.toJSON().slice(0,10)
			this.rankReload()
		},
		async rankReload(){
			var date2=rsideDate.value,row2=rsideRow.value
			var lst=[],rows2={},{rows}=await app.xpost("/ranks/list",{id:row2.num,date:date2})

			if(rows.length){
				var first=rows[rows.length-1][1]
				var diff=first
				for(var i=rows.length-1;i>=0;i--){
					var row=rows[i]
					rows2[row[0]]={
						rank2:row[1],
						diff:diff-row[1],
						last:first-row[1]
					}
					diff=row[1]
				}
			}

			var now=new Date(date2)
			now.setMonth(now.getMonth()+1)
			now.setDate(1)

			for(var i=33;i>0;i--){
				now.setDate(now.getDate()-1)
				var time=now.toJSON().slice(0,10)
				lst.push({
					time,
					rank:"",
					...rows2[time]
				})
				if(now.getDate()==1){
					break
				}
			}
			rsideList.value=lst
		},
		async rankUpdate(){
			var data=[],row2=rsideRow.value

			for(var row of rsideList.value){
				if(row.rank!==""){
					data.push([row.time,row2.job,row2.txt,row.rank])
				}
			}

			if(data.length){
				await app.xpost("/ranks/set",{ranks:data})
				this.rankReload()
				this.reload()
			}
		},
		today(){
			var now=new Date()
			now.setMinutes(now.getMinutes()-now.getTimezoneOffset())
			return now.toJSON().slice(0,10)
		},
		job(a){
			var b=a.split("\t")
			switch(b[0]){
			case "cs0":if(b[1])return `https://www.coupang.com/vp/products/${b[1]}`+this.param("itemId",b[2],"vendorItemId",b[3])
			case "ns0":if(b[1])return ``
			}
		},
		parseRank(a){
			var b=a.split("\t")
			return {rankin:b[0],rankout:b[1]}
		},
		parseDay(a){
			var b=a.split("\t")
			return {online:b[0],timein:b[1],timeout:b[2],alert:+b[3]}
		},
		param(...a){
			var b="",c="?"
			for(var i=0;i<a.length;i+=2){
				b+=c
				b+=a[i]
				b+="="
				b+=a[i+1]
				c="&"
			}
			return b
		},
		*blankList(){
			var size=listsize.value
			for(var row of list.value){
				yield row
				size--
			}
			for(;size>0;size--){
				yield {}
			}
		}
	},
	mounted(){
		this.reload()
		date.value=rsideDate.value=this.today()
	}
})
</script>